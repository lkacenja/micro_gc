<?php

function micro_gc_menu() {
  $items = array();
  $items['micro-gc'] = array(
    'title' => 'Micro Geocoder endpoint',
    'description' => 'Menu callback to geocode an address that is run through the cache layer.',
    'page callback' => 'micro_gc_page_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

function micro_gc_page_callback($query) {
  header('Content-Type: application/json');
  if ($result = micro_gc_query($query)) {
    print json_encode($result);
    return;
  }
  print json_encode(FALSE);
}

function micro_gc_query($query) {
  $key = micro_gc_query_to_key($query);
  $cache = micro_gc_get_cache_item($key);
  if (!empty($cache)) {
    return $cache->gc_coords;
  }
  $result = micro_gc_geocode($query);
  $result = json_decode($result);
  if ($result->status == "OK") {
    $point = micro_gc_coords_to_wkt($result->results[0]->geometry->location);
    $cache_item = new stdClass();
    $cache_item->gc_key = $key;
    $cache_item->gc_raw = $query;
    $cache_item->gc_coords = $point;
    micro_gc_set_cache_item($cache_item); 
    return $point;
  }
  return FALSE;
}

function micro_gc_coords_to_wkt($coords) {
  if (is_object($coords) && $coords->lat && $coords->lng) {
    return "POINT(" . $coords->lng . " " . $coords->lat . ")";
  }
  return FALSE;
}

function micro_gc_query_to_key($query) {
  return md5($query);
}

function micro_gc_resource() {
  return 'http://maps.googleapis.com/maps/api/geocode/json';
}

function micro_gc_api_key() {
  return variable_get('micro_gc_api_key', FALSE);
}

function micro_gc_geocode($query) {
  $endpoint = micro_gc_resource();
  $endpoint .= '?address=' . urlencode($query);
  $key = micro_gc_api_key();
  if (!empty($key)) {
    $endpoint .= '&key=' . $key;
  } 
  return file_get_contents($endpoint);
}

/**
 * Cache getter
 */
function micro_gc_get_cache_item($key) {
  $query = db_select('micro_gc_cache', 'cache');
  $query->fields('cache', array());
  $query->condition('gc_key', $key, '=');
  $resource = $query->execute();
  $result = $resource->fetchAll();
  if (!empty($result)) {
    return $result[0];
  }
  return FALSE;
}

/**
 * Cache setter
 */
function micro_gc_set_cache_item($item) {
  $item->gc_time = time();
  return drupal_write_record('micro_gc_cache', $item);
}
